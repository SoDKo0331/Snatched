{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nlet CounterComponent = class CounterComponent {\n  constructor(http, formBuilder, toaster) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.toaster = toaster;\n    this.APIUrl = 'https://localhost:7252/WeatherForecast';\n    this.items = [];\n    this.isRegistration = true;\n  }\n  showSuccessToaster() {\n    this.toaster.info('Registered!');\n  }\n  showSuccessToasterl() {\n    this.toaster.info('Valid!');\n  }\n  showErrorToaster() {\n    this.toaster.info('Validation error!!!');\n  }\n  showErrorToastern() {\n    this.toaster.info('Not Registered!!!');\n  }\n  showErrorToasterli() {\n    this.toaster.info('Logged in!');\n  }\n  ngOnInit() {\n    this.infoForm = this.formBuilder.group({\n      ID: [0],\n      FName: ['', [Validators.required, Validators.maxLength(15)]],\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\n      Password: ['', [Validators.required, Validators.maxLength(15), Validators.pattern('^(?=.*[A-Z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')]]\n    });\n    this.loginForm = this.formBuilder.group({\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\n      Password: ['', [Validators.required, Validators.maxLength(15), Validators.pattern('^(?=.*[A-Z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')]]\n    });\n  }\n  openpostModal() {\n    console.log('karakum: ' + this.infoForm.value.FName);\n  }\n  onSubmit() {\n    if (this.isRegistration) {\n      if (this.infoForm.valid) {\n        this.http.post(`${this.APIUrl}`, this.infoForm.value).subscribe({\n          next: () => {\n            console.log(`Posted: ${this.infoForm.value.Username}`);\n            this.showSuccessToaster();\n            this.ngOnInit(); // Close the modal\n          },\n\n          error: err => {\n            console.log(err);\n            console.log('error here!');\n          }\n        });\n      } else this.showErrorToaster();\n    } else {\n      if (this.loginForm.valid) {\n        this.showSuccessToasterl();\n      } else this.showErrorToaster();\n    }\n  }\n  logIn() {\n    if (this.loginForm.valid) {\n      this.showSuccessToasterli();\n    } else this.showErrorToastern();\n  }\n  toggleForm() {\n    this.isRegistration = !this.isRegistration;\n    this.infoForm.reset();\n    this.loginForm.reset();\n  }\n};\nCounterComponent = __decorate([Component({\n  selector: 'app-counter-component',\n  templateUrl: './counter.component.html',\n  animations: [trigger('fadeInOut', [state('void', style({\n    opacity: 0\n  })), transition('* <=> *', [animate('300ms ease-in-out')])])]\n})], CounterComponent);\nexport { CounterComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","trigger","state","style","transition","animate","CounterComponent","constructor","http","formBuilder","toaster","showSuccessToaster","info","showSuccessToasterl","showErrorToaster","showErrorToastern","showErrorToasterli","ngOnInit","infoForm","group","ID","FName","required","maxLength","Username","Password","pattern","loginForm","openpostModal","console","log","value","onSubmit","isRegistration","valid","post","APIUrl","subscribe","next","error","err","logIn","showSuccessToasterli","toggleForm","reset","selector","templateUrl","animations","opacity"],"sourceRoot":"","sources":["D:\\aka\\ClientApp\\src\\app\\counter\\counter.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { ToastService } from 'angular-toastify';\r\n\r\n@Component({\r\n  selector: 'app-counter-component',\r\n  templateUrl: './counter.component.html',\r\n  animations: [\r\n    trigger('fadeInOut', [\r\n      state('void', style({ opacity: 0 })),\r\n      transition('* <=> *', [\r\n        animate('300ms ease-in-out'),\r\n      ]),\r\n    ]),\r\n  ],\r\n})\r\nexport class CounterComponent implements OnInit {\r\n  constructor(private http: HttpClient, private formBuilder: FormBuilder, private toaster: ToastService) {}\r\n\r\n  readonly APIUrl = 'https://localhost:7252/WeatherForecast';\r\n\r\n  public items: items[] = [];\r\n  public infoForm!: FormGroup;\r\n  public loginForm!: FormGroup;\r\n  public isRegistration: boolean = true;\r\n  showSuccessToaster() {\r\n    this.toaster.info('Registered!');\r\n  }\r\n  showSuccessToasterl() {\r\n    this.toaster.info('Valid!');\r\n  }\r\n  showErrorToaster() {\r\n    this.toaster.info('Validation error!!!');\r\n  }\r\n  showErrorToastern(){\r\n    this.toaster.info('Not Registered!!!');\r\n  }\r\n  showErrorToasterli(){\r\n    this.toaster.info('Logged in!');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.infoForm = this.formBuilder.group({\r\n      ID: [0],\r\n      FName: ['', [Validators.required, Validators.maxLength(15)]],\r\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\r\n      Password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(15),\r\n          Validators.pattern('^(?=.*[A-Z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')\r\n        ]\r\n      ]\r\n    });\r\n\r\n    this.loginForm = this.formBuilder.group({\r\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\r\n      Password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(15),\r\n          Validators.pattern('^(?=.*[A-Z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')\r\n        ]\r\n      ]\r\n    });\r\n  }\r\n\r\n  openpostModal() {\r\n    console.log('karakum: ' + this.infoForm.value.FName);\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.isRegistration) {\r\n      if (this.infoForm.valid) {\r\n        this.http.post(`${this.APIUrl}`, this.infoForm.value).subscribe({\r\n          next: () => {\r\n            console.log(`Posted: ${this.infoForm.value.Username}`);\r\n            this.showSuccessToaster();\r\n            this.ngOnInit(); // Close the modal\r\n          },\r\n          error: (err) => {\r\n            \r\n            console.log(err);\r\n            console.log('error here!');\r\n          }\r\n        });\r\n      }\r\n      else this.showErrorToaster();\r\n    } else {\r\n      if (this.loginForm.valid) {\r\n        this.showSuccessToasterl();\r\n      }\r\n      else this.showErrorToaster();\r\n    }\r\n  }\r\n\r\n  logIn() {\r\n      if (this.loginForm.valid) {\r\n        this.showSuccessToasterli();\r\n      }\r\n      else this.showErrorToastern();\r\n    }\r\n\r\n  toggleForm() {\r\n    this.isRegistration = !this.isRegistration;\r\n    this.infoForm.reset();\r\n    this.loginForm.reset();\r\n  }\r\n}\r\n\r\ninterface items {\r\n  ID: number;\r\n  FName: string;\r\n  Username: string;\r\n  Password: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}