{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/router\";\nfunction CounterComponent_span_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \"is required!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CounterComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \"is required!\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CounterComponent_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \"is required!\");\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c0 = function () {\n  return [\"/fetch-data\"];\n};\nexport class CounterComponent {\n  constructor(http, formBuilder) {\n    this.http = http;\n    this.formBuilder = formBuilder;\n    this.APIUrl = 'https://localhost:7252/WeatherForecast';\n    this.items = [];\n  }\n  ngOnInit() {\n    this.infoForm = this.formBuilder.group({\n      ID: [0],\n      FName: ['', [Validators.required, Validators.maxLength(15)]],\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\n      Password: ['', [Validators.required, Validators.maxLength(15), Validators.pattern('^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')]]\n    });\n  }\n  openpostModal() {\n    console.log('karakum: ' + this.infoForm.value.FName);\n  }\n  Posting() {\n    if (this.infoForm.valid) {\n      this.http.post(`${this.APIUrl}`, this.infoForm.value).subscribe({\n        next: () => {\n          console.log(`Posted: ${this.infoForm.value.Username}`);\n          this.closeNewModal(); // Close the modal\n        },\n\n        error: err => {\n          console.log(err);\n          console.log(\"error here!\");\n        }\n      });\n    }\n  }\n  closeNewModal() {\n    const modal = document.getElementById('newModal');\n    if (modal) {\n      modal.classList.remove('show');\n      modal.style.display = 'none';\n      document.body.classList.remove('modal-open');\n      const modalBackdrop = document.querySelector('.modal-backdrop');\n      if (modalBackdrop) {\n        modalBackdrop.remove();\n      }\n    }\n  }\n}\nCounterComponent.ɵfac = function CounterComponent_Factory(t) {\n  return new (t || CounterComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nCounterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CounterComponent,\n  selectors: [[\"app-counter-component\"]],\n  decls: 24,\n  vars: 6,\n  consts: [[1, \"d-flex\", \"justify-content-between\", 3, \"formGroup\", \"ngSubmit\"], [\"id\", \"newModal\", \"tabindex\", \"-1\"], [1, \"bg-info\"], [1, \"mt-5\", \"pt-5\", \"d-flex\", \"bg-info-subtle\", \"position-relative\", \"d-flex\", \"justify-content-center\", \"bg-light\", \"border\", \"rounded-4\", \"border-1\", \"border-primary-subtle\", \"flex-column\", 2, \"width\", \"600px\", \"height\", \"400px\"], [1, \"d-flex\", \"justify-content-around\"], [1, \"m-3\", \"d-flex\", \"justify-content-center\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"FName\", 1, \"input-group\", \"mb-3\", \"bg-light\", \"border-1\", \"rounded\", \"shadow-sm\", \"bg-body-tertiary\", 2, \"width\", \"220px\"], [\"type\", \"text\", \"formControlName\", \"Username\", 1, \"input-group\", \"mb-3\", \"bg-light\", \"border-1\", \"rounded\", \"shadow-sm\", \"bg-body-tertiary\", 2, \"width\", \"220px\"], [\"type\", \"text\", \"formControlName\", \"Password\", 1, \"input-group\", \"mb-3\", \"bg-light\", \"border-1\", \"rounded\", \"shadow-sm\", \"bg-body-tertiary\", 2, \"width\", \"220px\"], [\"type\", \"hidden\", \"formControlName\", \"ID\"], [1, \"modal-footer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-info\", \"w-100\", \"m-2\", \"border-1\", \"rounded\", \"text-dark\", \"shadow\", \"bg-body-tertiary\", 2, \"width\", \"200px\"], [\"type\", \"button\", 1, \"btn\", \"btn-transparent\", \"w-100\", \"p-1\", \"text-dark\", \"m-2\", 3, \"routerLink\"], [1, \"text-danger\"]],\n  template: function CounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CounterComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.Posting();\n      });\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"h4\", 5);\n      i0.ɵɵtext(7, \" Registeration section (Logo could be here)\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\");\n      i0.ɵɵtext(9, \" Full Name \");\n      i0.ɵɵtemplate(10, CounterComponent_span_10_Template, 2, 0, \"span\", 6);\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵtext(12, \" Username \");\n      i0.ɵɵtemplate(13, CounterComponent_span_13_Template, 2, 0, \"span\", 6);\n      i0.ɵɵelement(14, \"input\", 8);\n      i0.ɵɵtext(15, \" Password \");\n      i0.ɵɵtemplate(16, CounterComponent_span_16_Template, 2, 0, \"span\", 6);\n      i0.ɵɵelement(17, \"input\", 9)(18, \"input\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 11)(20, \"button\", 12);\n      i0.ɵɵtext(21, \"Create\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"button\", 13);\n      i0.ɵɵtext(23, \"All accounts ->\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.infoForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.infoForm.get(\"FName\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.infoForm.get(\"FName\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.infoForm.get(\"Username\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.infoForm.get(\"Username\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.infoForm.get(\"Password\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.infoForm.get(\"Password\")) == null ? null : tmp_3_0.touched));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(5, _c0));\n    }\n  },\n  dependencies: [i3.NgIf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i4.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","CounterComponent","constructor","http","formBuilder","ngOnInit","infoForm","group","ID","FName","required","maxLength","Username","Password","pattern","openpostModal","console","log","value","Posting","valid","post","APIUrl","subscribe","next","closeNewModal","error","err","modal","document","getElementById","classList","remove","style","display","body","modalBackdrop","querySelector","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\aka\\ClientApp\\src\\app\\counter\\counter.component.ts","D:\\aka\\ClientApp\\src\\app\\counter\\counter.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-counter-component',\r\n  templateUrl: './counter.component.html'\r\n})\r\nexport class CounterComponent {\r\n  constructor(private http: HttpClient, private formBuilder: FormBuilder) {\r\n  }\r\n\r\n  readonly APIUrl = 'https://localhost:7252/WeatherForecast';\r\n\r\n  public items: items[] = [];\r\n  public infoForm!: FormGroup;\r\n  public accForm!: FormGroup;\r\n\r\n  ngOnInit() {\r\n    this.infoForm = this.formBuilder.group({\r\n      ID: [0],\r\n      FName: ['', [Validators.required, Validators.maxLength(15)]],\r\n      Username: ['', [Validators.required, Validators.maxLength(10)]],\r\n      Password: ['', [Validators.required, Validators.maxLength(15),\r\n                      Validators.pattern('^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$')]]\r\n    });\r\n  }\r\n  openpostModal() {\r\n    console.log('karakum: ' + this.infoForm.value.FName);\r\n  }\r\n  Posting() {\r\n    if (this.infoForm.valid) {\r\n      this.http.post(`${this.APIUrl}`, this.infoForm.value).subscribe({\r\n        next: () => {\r\n          console.log(`Posted: ${this.infoForm.value.Username}`);\r\n          this.closeNewModal(); // Close the modal\r\n        },\r\n        error: (err) => { \r\n          console.log(err);\r\n          console.log(\"error here!\");\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  closeNewModal() {\r\n    const modal = document.getElementById('newModal');\r\n    if (modal) {\r\n      modal.classList.remove('show');\r\n      modal.style.display = 'none';\r\n      document.body.classList.remove('modal-open');\r\n      const modalBackdrop = document.querySelector('.modal-backdrop');\r\n      if (modalBackdrop) {\r\n        modalBackdrop.remove();\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\ninterface items {\r\n  ID: number;\r\n  FName: string;\r\n  Username: string;\r\n  Password: string;\r\n}\r\n","<!-- new modal -->\r\n<div>\r\n    <form class=\"d-flex justify-content-between\" [formGroup]=\"infoForm\" (ngSubmit)=\"Posting()\">\r\n      <div id=\"newModal\" tabindex=\"-1\">\r\n        <div class=\"bg-info\">\r\n          <div style=\"width: 600px; height: 400px;\"  class=\"mt-5 pt-5 d-flex bg-info-subtle position-relative d-flex justify-content-center bg-light border rounded-4 border-1 border-primary-subtle flex-column\">\r\n            <!-- ... Modal header ... -->\r\n            <div class=\"d-flex justify-content-around\">\r\n              <h4 class=\"m-3 d-flex justify-content-center\"> Registeration section (Logo could be here)</h4>\r\n              <div >\r\n                Full Name\r\n                <span class=\"text-danger\" *ngIf=\"infoForm.get('FName')?.invalid && infoForm.get('FName')?.touched\">is required!</span>\r\n                <input type=\"text\" style=\"width: 220px;\" class=\"input-group mb-3 bg-light border-1 rounded shadow-sm bg-body-tertiary\" formControlName=\"FName\" />\r\n                Username\r\n                <span class=\"text-danger\" *ngIf=\"infoForm.get('Username')?.invalid && infoForm.get('Username')?.touched\">is required!</span>\r\n                <input type=\"text\" style=\"width: 220px;\" class=\"input-group mb-3 bg-light border-1 rounded shadow-sm bg-body-tertiary\" formControlName=\"Username\" />\r\n                Password\r\n                <span class=\"text-danger\" *ngIf=\"infoForm.get('Password')?.invalid && infoForm.get('Password')?.touched\">is required!</span>\r\n                <input type=\"text\" style=\"width: 220px;\" class=\"input-group mb-3 bg-light border-1 rounded shadow-sm bg-body-tertiary\" formControlName=\"Password\" />\r\n                <!-- ... Similar markup for Username and Password ... -->\r\n                <input type=\"hidden\" formControlName=\"ID\" />\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n              <button type=\"submit\" style=\"width: 200px;\" class=\"btn btn-outline-info w-100 m-2 border-1 rounded text-dark shadow bg-body-tertiary\">Create</button>\r\n              <button type=\"button\" [routerLink]=\"['/fetch-data']\" class=\"btn btn-transparent w-100 p-1 text-dark m-2\">All accounts -></button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}